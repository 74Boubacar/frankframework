<?xml version="1.0" encoding="UTF-8"?>
<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:util="http://www.springframework.org/schema/util"
		xsi:schemaLocation=
				"
		http://www.springframework.org/schema/beans classpath:xml/xsd/spring-beans-3.2.xsd
		http://www.springframework.org/schema/util classpath:xml/xsd/spring-util-3.2.xsd
		"
>

	<!--
	Use Spring DataSourceTransactionManager which is good enough in case only
	one data source needs to be managed by the transaction manager.
	In case no database is available configure an in-memory database like H2 in
	Tomcat to still be able to use this configuration.
	In order to properly handle 'Propagation: Supports', set property
	'transactionSynchronization' to 'Synchronize on actual transaction'.
	-->
	<bean
			id="txManagerReal"
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
	>
		<property name="dataSource">
			<ref bean="defaultDataSource"/>
		</property>
		<property name="transactionSynchronization">
			<util:constant static-field="org.springframework.transaction.support.AbstractPlatformTransactionManager.SYNCHRONIZATION_ON_ACTUAL_TRANSACTION"/>
		</property>
	</bean>

	<bean
			id="defaultDataSource"
			class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy"
	>
		<property name="targetDataSource">
			<ref bean="muratDataSource"/>
		</property>
	</bean>

	<bean
			id="muratDataSource"
			class="oracle.jdbc.pool.OracleDataSource"
	>
		<property name="dataSourceName" value="${instance.name.lc}"/>
		<property name="URL" value="jdbc:oracle:thin:@localhost:9000:ORCLCDB"/>
		<property name="user" value="second_user"/>
		<property name="password" value="second_user"/>
	</bean>



	<!--
	Overwrite jndiDataSource bean to prevent:
	javax.naming.NameNotFoundException: Name ibis4example is not bound in this Context
	-->
	<bean name="jndiDataSource" class="java.lang.String"/>

	<!-- Make the proxied data source available to the JdbcFacade -->
	<bean id="proxiedDataSources" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<entry key="jdbc/${instance.name.lc}">
					<ref bean="defaultDataSource"/>
				</entry>
			</map>
		</constructor-arg>
	</bean>

</beans>



